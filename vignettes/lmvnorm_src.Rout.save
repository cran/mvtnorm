
> year <- substr(packageDescription("mvtnorm")$Date, 
+     1, 4)

> version <- packageDescription("mvtnorm")$Version

> chk <- function(...) stopifnot(isTRUE(all.equal(...)))

> library("mvtnorm")

> set.seed(290875)

> N <- 4

> J <- 5

> rn <- paste0("C_", 1:N)

> nm <- LETTERS[1:J]

> Jn <- J * (J - 1)/2

> xn <- matrix(runif(N * Jn), ncol = N)

> colnames(xn) <- rn

> xd <- matrix(runif(N * (Jn + J)), ncol = N)

> colnames(xd) <- rn

> (lxn <- ltMatrices(xn, byrow = TRUE, names = nm))
, , C_1

           A         B          C         D E
A 1.00000000 0.0000000 0.00000000 0.0000000 0
B 0.51236601 1.0000000 0.00000000 0.0000000 0
C 0.05847253 0.9095137 1.00000000 0.0000000 0
D 0.39448719 0.6612143 0.23352591 1.0000000 0
E 0.51647518 0.2979867 0.07517749 0.8182123 1

, , C_2

          A         B         C        D E
A 1.0000000 0.0000000 0.0000000 0.000000 0
B 0.8590665 1.0000000 0.0000000 0.000000 0
C 0.3744315 0.1022684 1.0000000 0.000000 0
D 0.1165248 0.7956529 0.8930589 1.000000 0
E 0.1948049 0.4730419 0.2377852 0.214606 1

, , C_3

          A         B         C         D E
A 1.0000000 0.0000000 0.0000000 0.0000000 0
B 0.4530153 1.0000000 0.0000000 0.0000000 0
C 0.9045608 0.9269936 1.0000000 0.0000000 0
D 0.4490011 0.1326375 0.4153967 1.0000000 0
E 0.9574833 0.4917481 0.7160702 0.2938002 1

, , C_4

             A         B           C         D E
A 1.0000000000 0.0000000 0.000000000 0.0000000 0
B 0.4877241328 1.0000000 0.000000000 0.0000000 0
C 0.0593045885 0.7625270 1.000000000 0.0000000 0
D 0.0005227393 0.1995700 0.470508903 1.0000000 0
E 0.4913541358 0.2849431 0.005961103 0.8901458 1


> dim(lxn)
[1] 4 5 5

> dimnames(lxn)
[[1]]
[1] "C_1" "C_2" "C_3" "C_4"

[[2]]
[1] "A" "B" "C" "D" "E"

[[3]]
[1] "A" "B" "C" "D" "E"


> lxd <- ltMatrices(xd, byrow = TRUE, diag = TRUE, names = nm)

> dim(lxd)
[1] 4 5 5

> dimnames(lxd)
[[1]]
[1] "C_1" "C_2" "C_3" "C_4"

[[2]]
[1] "A" "B" "C" "D" "E"

[[3]]
[1] "A" "B" "C" "D" "E"


> lxn <- as.syMatrices(lxn)

> lxn
, , C_1

           A         B          C         D          E
A 1.00000000 0.5123660 0.05847253 0.3944872 0.51647518
B 0.51236601 1.0000000 0.90951367 0.6612143 0.29798667
C 0.05847253 0.9095137 1.00000000 0.2335259 0.07517749
D 0.39448719 0.6612143 0.23352591 1.0000000 0.81821229
E 0.51647518 0.2979867 0.07517749 0.8182123 1.00000000

, , C_2

          A         B         C         D         E
A 1.0000000 0.8590665 0.3744315 0.1165248 0.1948049
B 0.8590665 1.0000000 0.1022684 0.7956529 0.4730419
C 0.3744315 0.1022684 1.0000000 0.8930589 0.2377852
D 0.1165248 0.7956529 0.8930589 1.0000000 0.2146060
E 0.1948049 0.4730419 0.2377852 0.2146060 1.0000000

, , C_3

          A         B         C         D         E
A 1.0000000 0.4530153 0.9045608 0.4490011 0.9574833
B 0.4530153 1.0000000 0.9269936 0.1326375 0.4917481
C 0.9045608 0.9269936 1.0000000 0.4153967 0.7160702
D 0.4490011 0.1326375 0.4153967 1.0000000 0.2938002
E 0.9574833 0.4917481 0.7160702 0.2938002 1.0000000

, , C_4

             A         B           C            D           E
A 1.0000000000 0.4877241 0.059304588 0.0005227393 0.491354136
B 0.4877241328 1.0000000 0.762527028 0.1995699527 0.284943077
C 0.0593045885 0.7625270 1.000000000 0.4705089033 0.005961103
D 0.0005227393 0.1995700 0.470508903 1.0000000000 0.890145786
E 0.4913541358 0.2849431 0.005961103 0.8901457863 1.000000000


> a <- as.array(ltMatrices(xn, byrow = TRUE))

> b <- as.array(ltMatrices(ltMatrices(xn, byrow = TRUE), 
+     byrow = FALSE))

> chk(a, b)

> a <- as.array(ltMatrices(xn, byrow = FALSE))

> b <- as.array(ltMatrices(ltMatrices(xn, byrow = FALSE), 
+     byrow = TRUE))

> chk(a, b)

> a <- as.array(ltMatrices(xd, byrow = TRUE, diag = TRUE))

> b <- as.array(ltMatrices(ltMatrices(xd, byrow = TRUE, 
+     diag = TRUE), byrow = FALSE))

> chk(a, b)

> a <- as.array(ltMatrices(xd, byrow = FALSE, diag = TRUE))

> b <- as.array(ltMatrices(ltMatrices(xd, byrow = FALSE, 
+     diag = TRUE), byrow = TRUE))

> chk(a, b)

> a <- as.array(ltMatrices(xn, byrow = FALSE)[1:2, 2:4])

> b <- as.array(ltMatrices(xn, byrow = FALSE))[2:4, 
+     2:4, 1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xn, byrow = TRUE)[1:2, 2:4])

> b <- as.array(ltMatrices(xn, byrow = TRUE))[2:4, 2:4, 
+     1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xd, byrow = FALSE, diag = TRUE)[1:2, 
+     2:4])

> b <- as.array(ltMatrices(xd, byrow = FALSE, diag = TRUE))[2:4, 
+     2:4, 1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xd, byrow = TRUE, diag = TRUE)[1:2, 
+     2:4])

> b <- as.array(ltMatrices(xd, byrow = TRUE, diag = TRUE))[2:4, 
+     2:4, 1:2]

> chk(a, b)

> j <- c(1, 3, 5)

> a <- as.array(ltMatrices(xn, byrow = FALSE)[1:2, j])

> b <- as.array(ltMatrices(xn, byrow = FALSE))[j, j, 
+     1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xn, byrow = TRUE)[1:2, j])

> b <- as.array(ltMatrices(xn, byrow = TRUE))[j, j, 
+     1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xd, byrow = FALSE, diag = TRUE)[1:2, 
+     j])

> b <- as.array(ltMatrices(xd, byrow = FALSE, diag = TRUE))[j, 
+     j, 1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xd, byrow = TRUE, diag = TRUE)[1:2, 
+     j])

> b <- as.array(ltMatrices(xd, byrow = TRUE, diag = TRUE))[j, 
+     j, 1:2]

> chk(a, b)

> j <- -c(1, 3, 5)

> a <- as.array(ltMatrices(xn, byrow = FALSE)[1:2, j])

> b <- as.array(ltMatrices(xn, byrow = FALSE))[j, j, 
+     1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xn, byrow = TRUE)[1:2, j])

> b <- as.array(ltMatrices(xn, byrow = TRUE))[j, j, 
+     1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xd, byrow = FALSE, diag = TRUE)[1:2, 
+     j])

> b <- as.array(ltMatrices(xd, byrow = FALSE, diag = TRUE))[j, 
+     j, 1:2]

> chk(a, b)

> a <- as.array(ltMatrices(xd, byrow = TRUE, diag = TRUE)[1:2, 
+     j])

> b <- as.array(ltMatrices(xd, byrow = TRUE, diag = TRUE))[j, 
+     j, 1:2]

> chk(a, b)

> j <- sample(1:J)

> ltM <- ltMatrices(xn, byrow = FALSE)

> try(ltM[1:2, j])
Error in `[.ltMatrices`(ltM, 1:2, j) : invalid subset argument j

> ltM <- as.syMatrices(ltM)

> a <- as.array(ltM[1:2, j])

> b <- as.array(ltM)[j, j, 1:2]

> chk(a, b)

> M <- ltMatrices(matrix(1:10, nrow = 10, ncol = 2), 
+     diag = TRUE)

> Lower_tri(M, diag = FALSE)
    [,1] [,2]
2.1    2    2
3.1    3    3
4.1    4    4
3.2    6    6
4.2    7    7
4.3    9    9

> Lower_tri(M, diag = TRUE)
    [,1] [,2]
1.1    1    1
2.1    2    2
3.1    3    3
4.1    4    4
2.2    5    5
3.2    6    6
4.2    7    7
3.3    8    8
4.3    9    9
4.4   10   10
attr(,"J")
[1] 4
attr(,"diag")
[1] TRUE
attr(,"byrow")
[1] FALSE
attr(,"rcnames")
[1] "1" "2" "3" "4"

> M <- ltMatrices(matrix(1:6, nrow = 6, ncol = 2), diag = FALSE)

> Lower_tri(M, diag = FALSE)
    [,1] [,2]
2.1    1    1
3.1    2    2
4.1    3    3
3.2    4    4
4.2    5    5
4.3    6    6
attr(,"J")
[1] 4
attr(,"diag")
[1] FALSE
attr(,"byrow")
[1] FALSE
attr(,"rcnames")
[1] "1" "2" "3" "4"

> Lower_tri(M, diag = TRUE)
    [,1] [,2]
1.1    1    1
2.1    1    1
3.1    2    2
4.1    3    3
2.2    1    1
3.2    4    4
4.2    5    5
3.3    1    1
4.3    6    6
4.4    1    1
attr(,"J")
[1] 4
attr(,"diag")
[1] TRUE
attr(,"byrow")
[1] FALSE
attr(,"rcnames")
[1] "1" "2" "3" "4"

> Lower_tri(invchol2cor(M))
          [,1]       [,2]
2.1 -0.7071068 -0.7071068
3.1  0.4364358  0.4364358
4.1 -0.4481107 -0.4481107
3.2 -0.9258201 -0.9258201
4.2  0.9189002  0.9189002
4.3 -0.9974149 -0.9974149
attr(,"J")
[1] 4
attr(,"diag")
[1] FALSE
attr(,"byrow")
[1] FALSE
attr(,"rcnames")
[1] "1" "2" "3" "4"

> all(diagonals(ltMatrices(xn, byrow = TRUE)) == 1)
[1] TRUE

> lxd2 <- lxn

> diagonals(lxd2) <- 1

> chk(as.array(lxd2), as.array(lxn))

> (I5 <- diagonals(5))
, , 1

  1 2 3 4 5
1 1 0 0 0 0
2 0 1 0 0 0
3 0 0 1 0 0
4 0 0 0 1 0
5 0 0 0 0 1


> diagonals(I5) <- 1:5

> I5
, , 1

  1 2 3 4 5
1 1 0 0 0 0
2 0 2 0 0 0
3 0 0 3 0 0
4 0 0 0 4 0
5 0 0 0 0 5


> lxn <- ltMatrices(xn, byrow = TRUE)

> lxd <- ltMatrices(xd, byrow = TRUE, diag = TRUE)

> y <- matrix(runif(N * J), nrow = J)

> a <- Mult(lxn, y)

> A <- as.array(lxn)

> b <- do.call("rbind", lapply(1:ncol(y), function(i) t(A[, 
+     , i] %*% y[, i, drop = FALSE])))

> chk(a, t(b), check.attributes = FALSE)

> a <- Mult(lxd, y)

> A <- as.array(lxd)

> b <- do.call("rbind", lapply(1:ncol(y), function(i) t(A[, 
+     , i] %*% y[, i, drop = FALSE])))

> chk(a, t(b), check.attributes = FALSE)

> chk(Mult(lxn[rep(1, N), ], y), Mult(lxn[1, ], y), 
+     check.attributes = FALSE)

> chk(Mult(lxn, y[, 1]), Mult(lxn, y[, rep(1, N)]))

> i <- sample(1:N)[1]

> M <- t(as.array(lxn)[, , i])

> a <- sapply(1:J, function(j) Mult(lxn[i, ], M[, j, 
+     drop = FALSE]))

> rownames(a) <- colnames(a) <- dimnames(lxn)[[2]]

> b <- as.array(Tcrossprod(lxn[i, ]))[, , 1]

> chk(a, b, check.attributes = FALSE)

> a <- Mult(lxn, y, transpose = TRUE)

> A <- as.array(lxn)

> b <- do.call("rbind", lapply(1:ncol(y), function(i) t(t(A[, 
+     , i]) %*% y[, i, drop = FALSE])))

> chk(a, t(b), check.attributes = FALSE)

> a <- Mult(lxd, y, transpose = TRUE)

> A <- as.array(lxd)

> b <- do.call("rbind", lapply(1:ncol(y), function(i) t(t(A[, 
+     , i]) %*% y[, i, drop = FALSE])))

> chk(a, t(b), check.attributes = FALSE)

> chk(Mult(lxn[rep(1, N), ], y, transpose = TRUE), Mult(lxn[1, 
+     ], y, transpose = TRUE), check.attributes = FALSE)

> chk(Mult(lxn, y[, 1], transpose = TRUE), Mult(lxn, 
+     y[, rep(1, N)], transpose = TRUE))

> J <- 5

> N1 <- 10

> ex <- expression({
+     C <- syMatrices(matrix(runif(N2 * J * (J + c(-1, 1)[DIAG + 
+         1])/2), ncol = N2), diag = DIAG)
+     x <- matrix(ru .... [TRUNCATED] 

> N2 <- N1

> DIAG <- TRUE

> eval(ex)

> N2 <- 1

> DIAG <- TRUE

> eval(ex)

> N2 <- 1

> DIAG <- FALSE

> eval(ex)

> N2 <- N1

> DIAG <- FALSE

> eval(ex)

> A <- as.array(lxn)

> a <- solve(lxn)

> a <- as.array(a)

> b <- array(apply(A, 3, function(x) solve(x), simplify = TRUE), 
+     dim = rev(dim(lxn)))

> chk(a, b, check.attributes = FALSE)

> A <- as.array(lxd)

> a <- as.array(solve(lxd))

> b <- array(apply(A, 3, function(x) solve(x), simplify = TRUE), 
+     dim = rev(dim(lxd)))

> chk(a, b, check.attributes = FALSE)

> chk(solve(lxn, y), Mult(solve(lxn), y))

> chk(solve(lxd, y), Mult(solve(lxd), y))

> chk(solve(lxn[1, ], y), as.array(solve(lxn[1, ]))[, 
+     , 1] %*% y)

> chk(solve(lxn[rep(1, N), ], y), solve(lxn[1, ], y), 
+     check.attributes = FALSE)

> chk(solve(lxn, y[, 1]), solve(lxn, y[, rep(1, N)]))

> chk(solve(lxn[1, ], y, transpose = TRUE), t(as.array(solve(lxn[1, 
+     ]))[, , 1]) %*% y)

> a <- as.array(Tcrossprod(lxn))

> b <- array(apply(as.array(lxn), 3, function(x) tcrossprod(x), 
+     simplify = TRUE), dim = rev(dim(lxn)))

> chk(a, b, check.attributes = FALSE)

> d <- Tcrossprod(lxn, diag_only = TRUE)

> chk(d, apply(a, 3, diag))

> chk(d, diagonals(Tcrossprod(lxn)))

> a <- as.array(Tcrossprod(lxd))

> b <- array(apply(as.array(lxd), 3, function(x) tcrossprod(x), 
+     simplify = TRUE), dim = rev(dim(lxd)))

> chk(a, b, check.attributes = FALSE)

> d <- Tcrossprod(lxd, diag_only = TRUE)

> chk(d, apply(a, 3, diag))

> chk(d, diagonals(Tcrossprod(lxd)))

> a <- as.array(Crossprod(lxn))

> b <- array(apply(as.array(lxn), 3, function(x) crossprod(x), 
+     simplify = TRUE), dim = rev(dim(lxn)))

> chk(a, b, check.attributes = FALSE)

> d <- Crossprod(lxn, diag_only = TRUE)

> chk(d, apply(a, 3, diag))

> chk(d, diagonals(Crossprod(lxn)))

> a <- as.array(Crossprod(lxd))

> b <- array(apply(as.array(lxd), 3, function(x) crossprod(x), 
+     simplify = TRUE), dim = rev(dim(lxd)))

> chk(a, b, check.attributes = FALSE)

> d <- Crossprod(lxd, diag_only = TRUE)

> chk(d, apply(a, 3, diag))

> chk(d, diagonals(Crossprod(lxd)))

> Sigma <- Tcrossprod(lxd)

> chk(chol(Sigma), lxd)

> Sigma <- Tcrossprod(lxn)

> chk(as.array(chol(Sigma)), as.array(lxn))

> J <- 10

> d <- TRUE

> L <- diag(J)

> L[lower.tri(L, diag = d)] <- prm <- runif(J * (J + 
+     c(-1, 1)[d + 1])/2)

> C <- solve(L)

> D <- -kronecker(t(C), C)

> S <- diag(J)

> S[lower.tri(S, diag = TRUE)] <- x <- runif(J * (J + 
+     1)/2)

> SD0 <- matrix(c(S) %*% D, ncol = J)

> SD1 <- -crossprod(C, tcrossprod(S, C))

> a <- ltMatrices(C[lower.tri(C, diag = TRUE)], diag = TRUE, 
+     byrow = FALSE)

> b <- ltMatrices(x, diag = TRUE, byrow = FALSE)

> SD2 <- -vectrick(a, b, a)

> SD2a <- -vectrick(a, b)

> chk(SD2, SD2a)

> chk(SD0[lower.tri(SD0, diag = d)], SD1[lower.tri(SD1, 
+     diag = d)])

> chk(SD0[lower.tri(SD0, diag = d)], c(unclass(SD2)))

> S <- t(matrix(as.array(b), byrow = FALSE, nrow = 1))

> SD2 <- -vectrick(a, S, a)

> SD2a <- -vectrick(a, S)

> chk(SD2, SD2a)

> chk(c(SD0), c(SD2))

> N <- 4

> prm <- runif(J * (J - 1)/2)

> C <- ltMatrices(prm)

> S <- matrix(runif(J^2 * N), ncol = N)

> A <- vectrick(C, S, C)

> Cx <- as.array(C)[, , 1]

> B <- apply(S, 2, function(x) t(Cx) %*% matrix(x, ncol = J) %*% 
+     t(Cx))

> chk(A, B)

> A <- vectrick(C, S, C, transpose = c(FALSE, FALSE))

> Cx <- as.array(C)[, , 1]

> B <- apply(S, 2, function(x) Cx %*% matrix(x, ncol = J) %*% 
+     Cx)

> chk(A, B)

> prec2pc <- function(x) {
+     ret <- -cov2cor(x)
+     diag(ret) <- 0
+     ret
+ }

> L <- lxn

> Sigma <- apply(as.array(L), 3, function(x) tcrossprod(solve(x)), 
+     simplify = FALSE)

> Prec <- lapply(Sigma, solve)

> Corr <- lapply(Sigma, cov2cor)

> CP <- lapply(Corr, solve)

> PC <- lapply(Prec, function(x) prec2pc(x))

> chk(unlist(Sigma), c(as.array(invchol2cov(L))), check.attributes = FALSE)

> chk(unlist(Prec), c(as.array(invchol2pre(L))), check.attributes = FALSE)

> chk(unlist(Corr), c(as.array(invchol2cor(L))), check.attributes = FALSE)

> chk(unlist(CP), c(as.array(Crossprod(invcholD(L)))), 
+     check.attributes = FALSE)

> chk(unlist(PC), c(as.array(invchol2pc(L))), check.attributes = FALSE)

> C <- lxn

> Sigma <- apply(as.array(C), 3, function(x) tcrossprod(x), 
+     simplify = FALSE)

> Prec <- lapply(Sigma, solve)

> Corr <- lapply(Sigma, cov2cor)

> CP <- lapply(Corr, solve)

> PC <- lapply(Prec, function(x) prec2pc(x))

> chk(unlist(Sigma), c(as.array(chol2cov(C))), check.attributes = FALSE)

> chk(unlist(Prec), c(as.array(chol2pre(C))), check.attributes = FALSE)

> chk(unlist(Corr), c(as.array(chol2cor(C))), check.attributes = FALSE)

> chk(unlist(CP), c(as.array(Crossprod(solve(Dchol(C))))), 
+     check.attributes = FALSE)

> chk(unlist(PC), c(as.array(chol2pc(C))), check.attributes = FALSE)

> L <- lxd

> Sigma <- apply(as.array(L), 3, function(x) tcrossprod(solve(x)), 
+     simplify = FALSE)

> Prec <- lapply(Sigma, solve)

> Corr <- lapply(Sigma, cov2cor)

> CP <- lapply(Corr, solve)

> PC <- lapply(Prec, function(x) prec2pc(x))

> chk(unlist(Sigma), c(as.array(invchol2cov(L))), check.attributes = FALSE)

> chk(unlist(Prec), c(as.array(invchol2pre(L))), check.attributes = FALSE)

> chk(unlist(Corr), c(as.array(invchol2cor(L))), check.attributes = FALSE)

> chk(unlist(CP), c(as.array(Crossprod(invcholD(L)))), 
+     check.attributes = FALSE)

> chk(unlist(PC), c(as.array(invchol2pc(L))), check.attributes = FALSE)

> C <- lxd

> Sigma <- apply(as.array(C), 3, function(x) tcrossprod(x), 
+     simplify = FALSE)

> Prec <- lapply(Sigma, solve)

> Corr <- lapply(Sigma, cov2cor)

> CP <- lapply(Corr, solve)

> PC <- lapply(Prec, function(x) prec2pc(x))

> chk(unlist(Sigma), c(as.array(chol2cov(C))), check.attributes = FALSE)

> chk(unlist(Prec), c(as.array(chol2pre(C))), check.attributes = FALSE)

> chk(unlist(Corr), c(as.array(chol2cor(C))), check.attributes = FALSE)

> chk(unlist(CP), c(as.array(Crossprod(solve(Dchol(C))))), 
+     check.attributes = FALSE)

> chk(unlist(PC), c(as.array(chol2pc(C))), check.attributes = FALSE)

> L <- lxn

> J <- dim(L)[2]

> Lp <- aperm(a = L, perm = p <- sample(1:J), is_chol = FALSE)

> chk(invchol2cov(L)[, p], invchol2cov(Lp))

> C <- lxn

> J <- dim(C)[2]

> Cp <- aperm(a = C, perm = p <- sample(1:J), is_chol = TRUE)

> chk(chol2cov(C)[, p], chol2cov(Cp))

> Sigma <- Tcrossprod(lxd)

> j <- 1:3

> chk(Sigma[, j], Tcrossprod(marg_mvnorm(chol = lxd, 
+     which = j)$chol))

> j <- 2:4

> chk(Sigma[, j], Tcrossprod(marg_mvnorm(chol = lxd, 
+     which = j)$chol))

> Sigma <- Tcrossprod(solve(lxd))

> j <- 1:3

> chk(Sigma[, j], Tcrossprod(solve(marg_mvnorm(invchol = lxd, 
+     which = j)$invchol)))

> j <- 2:4

> chk(Sigma[, j], Tcrossprod(solve(marg_mvnorm(invchol = lxd, 
+     which = j)$invchol)))

> Sigma <- as.array(Tcrossprod(lxd))[, , 1]

> j <- 2:4

> y <- matrix(c(-1, 2, 1), nrow = 3)

> cm <- Sigma[-j, j, drop = FALSE] %*% solve(Sigma[j, 
+     j]) %*% y

> cS <- Sigma[-j, -j] - Sigma[-j, j, drop = FALSE] %*% 
+     solve(Sigma[j, j]) %*% Sigma[j, -j, drop = FALSE]

> cmv <- cond_mvnorm(chol = lxd[1, ], which = j, given = y)

> chk(cm, cmv$mean)

> chk(cS, as.array(Tcrossprod(cmv$chol))[, , 1])

> Sigma <- as.array(Tcrossprod(solve(lxd)))[, , 1]

> j <- 2:4

> y <- matrix(c(-1, 2, 1), nrow = 3)

> cm <- Sigma[-j, j, drop = FALSE] %*% solve(Sigma[j, 
+     j]) %*% y

> cS <- Sigma[-j, -j] - Sigma[-j, j, drop = FALSE] %*% 
+     solve(Sigma[j, j]) %*% Sigma[j, -j, drop = FALSE]

> cmv <- cond_mvnorm(invchol = lxd[1, ], which = j, 
+     given = y)

> chk(cm, cmv$mean)

> chk(cS, as.array(Tcrossprod(solve(cmv$invchol)))[, 
+     , 1])

> Sigma <- as.array(Tcrossprod(lxd))[, , 1]

> j <- 1:3

> y <- matrix(c(-1, 2, 1), nrow = 3)

> cm <- Sigma[-j, j, drop = FALSE] %*% solve(Sigma[j, 
+     j]) %*% y

> cS <- Sigma[-j, -j] - Sigma[-j, j, drop = FALSE] %*% 
+     solve(Sigma[j, j]) %*% Sigma[j, -j, drop = FALSE]

> cmv <- cond_mvnorm(chol = lxd[1, ], which = j, given = y)

> chk(c(cm), c(cmv$mean))

> chk(cS, as.array(Tcrossprod(cmv$chol))[, , 1])

> Sigma <- as.array(Tcrossprod(solve(lxd)))[, , 1]

> j <- 1:3

> y <- matrix(c(-1, 2, 1), nrow = 3)

> cm <- Sigma[-j, j, drop = FALSE] %*% solve(Sigma[j, 
+     j]) %*% y

> cS <- Sigma[-j, -j] - Sigma[-j, j, drop = FALSE] %*% 
+     solve(Sigma[j, j]) %*% Sigma[j, -j, drop = FALSE]

> cmv <- cond_mvnorm(invchol = lxd[1, ], which = j, 
+     given = y)

> chk(c(cm), c(cmv$mean))

> chk(cS, as.array(Tcrossprod(solve(cmv$invchol)))[, 
+     , 1])

> N <- 1000

> J <- 50

> lt <- ltMatrices(matrix(runif(N * J * (J + 1)/2) + 
+     1, ncol = N), diag = TRUE, byrow = FALSE)

> Z <- matrix(rnorm(N * J), ncol = N)

> Y <- solve(lt, Z)

> ll1 <- sum(dnorm(Mult(lt, Y), log = TRUE)) + sum(log(diagonals(lt)))

> S <- as.array(Tcrossprod(solve(lt)))

> ll2 <- sum(sapply(1:N, function(i) dmvnorm(x = Y[, 
+     i], sigma = S[, , i], log = TRUE)))

> chk(ll1, ll2)

> ll3 <- ldmvnorm(obs = Y, invchol = lt)

> chk(ll1, ll3)

> (j <- 1:5 * 10)
[1] 10 20 30 40 50

> md <- marg_mvnorm(invchol = lt, which = j)

> cd <- cond_mvnorm(invchol = lt, which = j, given = Y[j, 
+     ])

> ll3 <- sum(dnorm(Mult(md$invchol, Y[j, ]), log = TRUE)) + 
+     sum(log(diagonals(md$invchol))) + sum(dnorm(Mult(cd$invchol, 
+     Y[-j, ] - cd$me .... [TRUNCATED] 

> chk(ll1, ll3)

> set.seed(270312)

> lpmvnormR <- function(lower, upper, mean = 0, center = NULL, 
+     chol, logLik = TRUE, ...) {
+     if (!is.matrix(lower)) 
+         lower <- mat .... [TRUNCATED] 

> J <- 5

> N <- 10

> x <- matrix(runif(N * J * (J + 1)/2), ncol = N)

> lx <- ltMatrices(x, byrow = TRUE, diag = TRUE)

> a <- matrix(runif(N * J), nrow = J) - 2

> a[sample(J * N)[1:2]] <- -Inf

> b <- a + 2 + matrix(runif(N * J), nrow = J)

> b[sample(J * N)[1:2]] <- Inf

> (phat <- c(lpmvnormR(a, b, chol = lx, logLik = FALSE)))
 [1] 0.2369329 0.2337179 0.2842052 0.3915213 0.4662496 0.0000000 0.5900784
 [8] 0.4618524 0.4872819 0.0000000

> phat
 [1] 0.2369329 0.2337179 0.2842052 0.3915213 0.4662496 0.0000000 0.5900784
 [8] 0.4618524 0.4872819 0.0000000

> exp(lpmvnorm(a, b, chol = lx, M = 25000, logLik = FALSE, 
+     fast = TRUE))
 [1] 2.366926e-01 2.341369e-01 2.834803e-01 3.938926e-01 4.658150e-01
 [6] 8.881784e-21 5.911462e-01 4.597514e-01 4.879485e-01 8.881784e-21

> exp(lpmvnorm(a, b, chol = lx, M = 25000, logLik = FALSE, 
+     fast = FALSE))
 [1] 2.377131e-01 2.372235e-01 2.831741e-01 3.875320e-01 4.659937e-01
 [6] 8.881784e-21 5.895400e-01 4.624243e-01 4.871073e-01 8.881784e-21

> M <- 10000

> if (require("qrng", quietly = TRUE)) {
+     W <- t(ghalton(M, d = J - 1))
+ } else {
+     W <- matrix(runif(M * (J - 1)), nrow = J - 1)
+ }

> pGB <- lpmvnormR(a, b, chol = lx, logLik = FALSE, 
+     algorithm = GenzBretz(maxpts = M, abseps = 0, releps = 0))

> pGqf <- exp(lpmvnorm(a, b, chol = lx, w = W, M = M, 
+     logLik = FALSE, fast = TRUE))

> pGf <- exp(lpmvnorm(a, b, chol = lx, w = NULL, M = M, 
+     logLik = FALSE, fast = TRUE))

> pGqs <- exp(lpmvnorm(a, b, chol = lx, w = W, M = M, 
+     logLik = FALSE, fast = FALSE))

> pGs <- exp(lpmvnorm(a, b, chol = lx, w = NULL, M = M, 
+     logLik = FALSE, fast = FALSE))

> cbind(pGB, pGqf, pGf, pGqs, pGs)
            pGB         pGqf          pGf         pGqs          pGs
 [1,] 0.2368918 2.369290e-01 2.344954e-01 2.369297e-01 2.360153e-01
 [2,] 0.2341507 2.340099e-01 2.319416e-01 2.340103e-01 2.347435e-01
 [3,] 0.2841044 2.841303e-01 2.850959e-01 2.841316e-01 2.870079e-01
 [4,] 0.3918357 3.921465e-01 3.931626e-01 3.921469e-01 3.904457e-01
 [5,] 0.4671062 4.668249e-01 4.678817e-01 4.668242e-01 4.690837e-01
 [6,] 0.0000000 2.220446e-20 2.220446e-20 2.220446e-20 2.220446e-20
 [7,] 0.5901670 5.902059e-01 5.907621e-01 5.902056e-01 5.929013e-01
 [8,] 0.4613023 4.619428e-01 4.611888e-01 4.619434e-01 4.630231e-01
 [9,] 0.4872195 4.870317e-01 4.863298e-01 4.870324e-01 4.820740e-01
[10,] 0.0000000 2.220446e-20 2.220446e-20 2.220446e-20 2.220446e-20

> pGB <- lpmvnormR(a[1, , drop = FALSE], b[1, , drop = FALSE], 
+     chol = lx[, 1], logLik = FALSE, algorithm = GenzBretz(maxpts = M, 
+         abs .... [TRUNCATED] 

> pGq <- exp(lpmvnorm(a[1, , drop = FALSE], b[1, , drop = FALSE], 
+     chol = lx[, 1], logLik = FALSE))

> ptr <- pnorm(b[1, ]/c(unclass(lx[, 1]))) - pnorm(a[1, 
+     ]/c(unclass(lx[, 1])))

> cbind(c(ptr), pGB, pGq)
                      pGB       pGq
 [1,] 0.9999758 0.9999758 0.9999758
 [2,] 0.6108928 0.6108928 0.6108928
 [3,] 0.9076043 0.9076043 0.9076043
 [4,] 0.8979932 0.8979932 0.8979932
 [5,] 0.9589363 0.9589363 0.9589363
 [6,] 0.7863435 0.7863435 0.7863435
 [7,] 0.9982537 0.9982537 0.9982537
 [8,] 0.8745388 0.8745388 0.8745388
 [9,] 0.9386051 0.9386051 0.9386051
[10,] 0.9119778 0.9119778 0.9119778

> J <- 5

> N <- 4

> S <- crossprod(matrix(runif(J^2), nrow = J))

> prm <- t(chol(S))[lower.tri(S, diag = TRUE)]

> mC <- ltMatrices(matrix(prm, ncol = 1), diag = TRUE)

> a <- matrix(runif(N * J), nrow = J) - 2

> b <- a + 4

> a[2, ] <- -Inf

> b[3, ] <- Inf

> M <- 10000

> W <- matrix(runif(M * (J - 1)), ncol = M)

> lli <- c(lpmvnorm(a, b, chol = mC, w = W, M = M, logLik = FALSE))

> fC <- function(prm) {
+     C <- ltMatrices(matrix(prm, ncol = 1), diag = TRUE)
+     lpmvnorm(a, b, chol = C, w = W, M = M)
+ }

> sC <- slpmvnorm(a, b, chol = mC, w = W, M = M)

> chk(lli, sC$logLik)

> if (require("numDeriv", quietly = TRUE)) chk(grad(fC, 
+     unclass(mC)), rowSums(unclass(sC$chol)), check.attributes = FALSE)

> mL <- solve(mC)

> lliL <- c(lpmvnorm(a, b, invchol = mL, w = W, M = M, 
+     logLik = FALSE))

> chk(lli, lliL)

> fL <- function(prm) {
+     L <- ltMatrices(matrix(prm, ncol = 1), diag = TRUE)
+     lpmvnorm(a, b, invchol = L, w = W, M = M)
+ }

> sL <- slpmvnorm(a, b, invchol = mL, w = W, M = M)

> chk(lliL, sL$logLik)

> if (require("numDeriv", quietly = TRUE)) chk(grad(fL, 
+     unclass(mL)), rowSums(unclass(sL$invchol)), check.attributes = FALSE)

> ptr <- pnorm(b[1, ]/c(unclass(mC[, 1]))) - pnorm(a[1, 
+     ]/c(unclass(mC[, 1])))

> log(ptr)
[1] -0.01165889 -0.08617272 -0.01240094 -0.03105050

> lpmvnorm(a[1, , drop = FALSE], b[1, , drop = FALSE], 
+     chol = mC[, 1], logLik = FALSE)
[1] -0.01165889 -0.08617272 -0.01240094 -0.03105050

> lapply(slpmvnorm(a[1, , drop = FALSE], b[1, , drop = FALSE], 
+     chol = mC[, 1], logLik = TRUE), unclass)
$logLik
[1] -0.01165889 -0.08617272 -0.01240094 -0.03105050

$mean
           [,1]      [,2]       [,3]       [,4]
[1,] 0.02222249 0.2140162 0.02641782 0.08861162

$lower
            [,1]      [,2]        [,3]        [,4]
[1,] -0.03221736 -0.214453 -0.03536199 -0.09096213

$upper
           [,1]         [,2]        [,3]        [,4]
[1,] 0.00999487 0.0004368597 0.008944164 0.002350511

$chol
         [,1]       [,2]       [,3]       [,4]
1.1 -0.104149 -0.2994286 -0.1075726 -0.1787174
attr(,"J")
[1] 1
attr(,"diag")
[1] TRUE
attr(,"byrow")
[1] FALSE
attr(,"rcnames")
[1] "1"


> sd1 <- c(unclass(mC[, 1]))

> (dnorm(b[1, ]/sd1) * b[1, ] - dnorm(a[1, ]/sd1) * 
+     a[1, ]) * (-1)/sd1^2/ptr
[1] -0.1041490 -0.2994286 -0.1075726 -0.1787174

> set.seed(110515)

> J <- 4

> R <- diag(J)

> R[1, 2] <- R[2, 1] <- 0.25

> R[1, 3] <- R[3, 1] <- 0.5

> R[2, 4] <- R[4, 2] <- 0.75

> round(Sigma <- diag(sqrt(1:J/2)) %*% R %*% diag(sqrt(1:J/2)), 
+     7)
          [,1]      [,2]      [,3]    [,4]
[1,] 0.5000000 0.1767767 0.4330127 0.00000
[2,] 0.1767767 1.0000000 0.0000000 1.06066
[3,] 0.4330127 0.0000000 1.5000000 0.00000
[4,] 0.0000000 1.0606602 0.0000000 2.00000

> (C <- t(chol(Sigma)))
          [,1]       [,2]      [,3]      [,4]
[1,] 0.7071068  0.0000000 0.0000000 0.0000000
[2,] 0.2500000  0.9682458 0.0000000 0.0000000
[3,] 0.6123724 -0.1581139 1.0488088 0.0000000
[4,] 0.0000000  1.0954451 0.1651446 0.8790491

> prm <- C[lower.tri(C, diag = TRUE)]

> lt <- ltMatrices(matrix(prm, ncol = 1), diag = TRUE, 
+     byrow = FALSE)

> BYROW <- FALSE

> lt <- ltMatrices(lt, byrow = BYROW)

> chk(C, as.array(lt)[, , 1], check.attributes = FALSE)

> chk(Sigma, as.array(Tcrossprod(lt))[, , 1], check.attributes = FALSE)

> N <- 100

> Z <- matrix(rnorm(N * J), nrow = J)

> Y <- Mult(lt, Z) + (mn <- 1:J)

> rowMeans(Y)
        1         2         3         4 
0.9685377 2.1268796 2.9633561 3.9825669 

> (Shat <- var(t(Y)) * (N - 1)/N)
           1          2          3          4
1 0.46655660 0.18104431 0.34222237 0.01609179
2 0.18104431 0.94385339 0.08992252 0.84309528
3 0.34222237 0.08992252 1.36054915 0.08104091
4 0.01609179 0.84309528 0.08104091 1.63301525

> Yc <- Y - rowMeans(Y)

> ll <- function(parm) {
+     C <- ltMatrices(parm, diag = TRUE, byrow = BYROW)
+     -ldmvnorm(obs = Yc, chol = C)
+ }

> sc <- function(parm) {
+     C <- ltMatrices(parm, diag = TRUE, byrow = BYROW)
+     -rowSums(unclass(sldmvnorm(obs = Yc, chol = C)$chol))
+ }

> llim <- rep(-Inf, J * (J + 1)/2)

> llim[which(rownames(unclass(lt)) %in% paste(1:J, 1:J, 
+     sep = "."))] <- 1e-04

> if (BYROW) {
+     cML <- chol(Shat)[upper.tri(Shat, diag = TRUE)]
+ } else {
+     cML <- t(chol(Shat))[lower.tri(Shat, diag = TRUE)]
+ }

> ll(cML)
[1] 517.8685

> start <- runif(length(cML))

> if (require("numDeriv", quietly = TRUE)) chk(grad(ll, 
+     start), sc(start), check.attributes = FALSE)

> op <- optim(start, fn = ll, gr = sc, method = "L-BFGS-B", 
+     lower = llim, control = list(trace = TRUE))
iter   10 value 518.092239
iter   20 value 517.868548
final  value 517.868548 
converged

> ltMatrices(op$par, diag = TRUE, byrow = BYROW)
, , 1

           1           2         3         4
1 0.68305690  0.00000000 0.0000000 0.0000000
2 0.26505417  0.93464707 0.0000000 0.0000000
3 0.50102358 -0.04586658 1.0523442 0.0000000
4 0.02356369  0.89534692 0.1048239 0.9054404


> ll(op$par)
[1] 517.8685

> t(chol(Shat))
           1           2        3         4
1 0.68304949  0.00000000 0.000000 0.0000000
2 0.26505300  0.93466588 0.000000 0.0000000
3 0.50102134 -0.04587167 1.052341 0.0000000
4 0.02355875  0.89534773 0.104822 0.9054419

> ll(cML)
[1] 517.8685

> lt
, , 1

          1          2         3         4
1 0.7071068  0.0000000 0.0000000 0.0000000
2 0.2500000  0.9682458 0.0000000 0.0000000
3 0.6123724 -0.1581139 1.0488088 0.0000000
4 0.0000000  1.0954451 0.1651446 0.8790491


> prb <- 1:9/10

> sds <- sqrt(diag(Sigma))

> ct <- sapply(1:J, function(j) qnorm(prb, mean = mn[j], 
+     sd = sds[j]))

> lwr <- upr <- Y

> for (j in 1:J) {
+     f <- cut(Y[j, ], breaks = c(-Inf, ct[, j], Inf))
+     lwr[j, ] <- c(-Inf, ct[, j])[f]
+     upr[j, ] <- c(ct[, j], Inf)[f]
+ .... [TRUNCATED] 

> M <- c(1000, 1105, 1221, 1349, 1491, 1648, 1822, 2013, 
+     2225, 2459, 2718, 3004, 3320, 3669, 4055, 4481, 4953, 5473, 
+     6049, 6685, 7389, 8 .... [TRUNCATED] 

> lGB <- matrix(c(0.054, -880.492612, 0.054, -880.492426, 
+     0.054, -880.492996, 0.054, -880.492629, 0.054, -880.490231, 
+     0.055, -880.492784 .... [TRUNCATED] 

> rownames(lGB) <- c("user.self", "ll")

> lH <- matrix(c(0.023, -880.480296, 0.027, -880.496166, 
+     0.029, -880.488683, 0.032, -880.496171, 0.035, -880.485597, 
+     0.039, -880.491333, .... [TRUNCATED] 

> rownames(lH) <- c("user.self", "ll")

> lHf <- matrix(c(0.018, -880.487067, 0.019, -880.488639, 
+     0.022, -880.488569, 0.024, -880.49393, 0.026, -880.486029, 
+     0.029, -880.491563, .... [TRUNCATED] 

> rownames(lHf) <- c("user.self", "ll")

> layout(matrix(1:2, nrow = 1))

> plot(M, lGB["ll", ], ylim = range(c(lGB["ll", ], lH["ll", 
+     ], lHf["ll", ])), ylab = "Log-likelihood")

> points(M, lH["ll", ], pch = 4)

> points(M, lHf["ll", ], pch = 5)

> plot(M, lGB["user.self", ], ylim = c(0, max(lGB["user.self", 
+     ])), ylab = "Time (in sec)")

> points(M, lH["user.self", ], pch = 4)

> points(M, lHf["user.self", ], pch = 5)

> legend("bottomright", legend = c("pmvnorm", "lpmvnorm", 
+     "lpmvnorm(fast)"), pch = c(1, 4, 5), bty = "n")

> M <- 500

> if (require("qrng", quietly = TRUE)) {
+     W <- t(ghalton(M, d = J - 1))
+ } else {
+     W <- matrix(runif(M * (J - 1)), nrow = J - 1)
+ }

> ll <- function(parm, J) {
+     m <- parm[1:J]
+     parm <- parm[-(1:J)]
+     C <- matrix(c(parm), ncol = 1)
+     C <- ltMatrices(C, diag = TRUE, .... [TRUNCATED] 

> prm <- c(mn, unclass(lt))

> ll(prm, J = J)
[1] 880.4956

> round(lpmvnormR(lwr, upr, mean = mn, chol = lt, algorithm = GenzBretz(maxpts = M, 
+     abseps = 0, releps = 0)), 3)
[1] -880.491

> (llprm <- lpmvnorm(lwr, upr, mean = mn, chol = lt, 
+     w = W, M = M))
[1] -880.4956

> chk(llprm, sum(lpmvnorm(lwr, upr, mean = mn, chol = lt, 
+     w = W, M = M, logLik = FALSE)))

> sc <- function(parm, J) {
+     m <- parm[1:J]
+     parm <- parm[-(1:J)]
+     C <- matrix(c(parm), ncol = 1)
+     C <- ltMatrices(C, diag = TRUE, .... [TRUNCATED] 

> if (require("numDeriv", quietly = TRUE)) chk(grad(ll, 
+     prm, J = J), sc(prm, J = J), check.attributes = FALSE)

> llim <- rep(-Inf, J + J * (J + 1)/2)

> llim[J + which(rownames(unclass(lt)) %in% paste(1:J, 
+     1:J, sep = "."))] <- 1e-04

> if (BYROW) {
+     start <- c(rowMeans(Y), chol(Shat)[upper.tri(Shat, diag = TRUE)])
+ } else {
+     start <- c(rowMeans(Y), t(chol(Shat))[lower.tr .... [TRUNCATED] 

> ll(start, J = J)
[1] 875.4005

> op <- optim(start, fn = ll, gr = sc, J = J, method = "L-BFGS-B", 
+     lower = llim, control = list(trace = TRUE))
iter   10 value 874.158309
final  value 874.158301 
converged

> op$value
[1] 874.1583

> ll(prm, J = J)
[1] 880.4956

> (C <- ltMatrices(matrix(op$par[-(1:J)], ncol = 1), 
+     diag = TRUE, byrow = BYROW))
, , 1

           1           2          3         4
1 0.67049567  0.00000000 0.00000000 0.0000000
2 0.26764384  1.02232159 0.00000000 0.0000000
3 0.54267774 -0.05007103 1.11347760 0.0000000
4 0.05223456  0.98429745 0.08473411 0.9613685


> lt
, , 1

          1          2         3         4
1 0.7071068  0.0000000 0.0000000 0.0000000
2 0.2500000  0.9682458 0.0000000 0.0000000
3 0.6123724 -0.1581139 1.0488088 0.0000000
4 0.0000000  1.0954451 0.1651446 0.8790491


> op$par[1:J]
        1         2         3         4 
0.9669828 2.1281616 2.9454002 3.9886471 

> mn
[1] 1 2 3 4

> round(Tcrossprod(lt), 7)
, , 1

          1         2         3       4
1 0.5000000 0.1767767 0.4330127 0.00000
2 0.1767767 1.0000000 0.0000000 1.06066
3 0.4330127 0.0000000 1.5000000 0.00000
4 0.0000000 1.0606602 0.0000000 2.00000


> round(Tcrossprod(C), 7)
, , 1

          1         2         3         4
1 0.4495644 0.1794540 0.3638631 0.0350230
2 0.1794540 1.1167747 0.0940557 1.0202488
3 0.3638631 0.0940557 1.5368386 0.0734113
4 0.0350230 1.0202488 0.0734113 1.9029791


> round(Shat, 7)
          1         2         3         4
1 0.4665566 0.1810443 0.3422224 0.0160918
2 0.1810443 0.9438534 0.0899225 0.8430953
3 0.3422224 0.0899225 1.3605492 0.0810409
4 0.0160918 0.8430953 0.0810409 1.6330153

> c(cond_mvnorm(chol = C, which = 2:J, given = diag(J - 
+     1))$mean)
[1]  0.2602003  0.2270392 -0.1298560

> dY <- as.data.frame(t(Y))

> colnames(dY) <- paste0("Y", 1:J)

> coef(m1 <- lm(Y1 ~ ., data = dY))[-1]
        Y2         Y3         Y4 
 0.3169117  0.2404565 -0.1656946 

> H <- optim(op$par, fn = ll, gr = sc, J = J, method = "L-BFGS-B", 
+     lower = llim, hessian = TRUE)$hessian

> L <- try(t(chol(H)))

> if (inherits(L, "try-error")) L <- t(chol(H + 1e-04 * 
+     diag(nrow(H))))

> L <- ltMatrices(L[lower.tri(L, diag = TRUE)], diag = TRUE)

> Nsim <- 50000

> Z <- matrix(rnorm(Nsim * nrow(H)), ncol = Nsim)

> rC <- solve(L, Z)[-(1:J), ] + op$par[-(1:J)]

> c(sqrt(rowMeans((rC - rowMeans(rC))^2)))
         5          6          7          8          9         10         11 
0.05129646 0.07989618 0.12445698 0.16089554 0.07609088 0.11566519 0.14020346 
        12         13         14 
0.09622312 0.10415427 0.08278985 

> c(sqrt(diagonals(Crossprod(solve(L)))))
 [1] 0.06825507 0.10816499 0.12670329 0.14073702 0.05498052 0.10839260
 [7] 0.12441885 0.14311786 0.08812684 0.11638318 0.13340466 0.09586564
[13] 0.10450821 0.08154249

> rC <- ltMatrices(rC, diag = TRUE)

> rbeta <- cond_mvnorm(chol = rC, which = 2:J, given = diag(J - 
+     1))$mean

> sqrt(rowMeans((rbeta - rowMeans(rbeta))^2))
[1] 0.08792945 0.04869062 0.07752184

> sqrt(diag(vcov(m1)))[-1]
        Y2         Y3         Y4 
0.08229627 0.05039009 0.06246094 

> ll_cd <- function(parm, J) {
+     m <- parm[1:J]
+     parm <- parm[-(1:J)]
+     C <- matrix(c(parm), ncol = 1)
+     C <- ltMatrices(C, diag = TR .... [TRUNCATED] 

> sc_cd <- function(parm, J) {
+     m <- parm[1:J]
+     parm <- parm[-(1:J)]
+     C <- matrix(c(parm), ncol = 1)
+     C <- ltMatrices(C, diag = TR .... [TRUNCATED] 

> if (require("numDeriv", quietly = TRUE)) chk(grad(ll_cd, 
+     start, J = J), sc_cd(start, J = J), check.attributes = FALSE, 
+     tol = 1e-06)

> op <- optim(start, fn = ll_cd, gr = sc_cd, J = J, 
+     method = "L-BFGS-B", lower = llim, control = list(trace = TRUE))
iter   10 value 655.707790
final  value 655.707779 
converged

> ltMatrices(matrix(op$par[-(1:J)], ncol = 1), diag = TRUE, 
+     byrow = BYROW)
, , 1

           1           2          3         4
1 0.68303340  0.00000000 0.00000000 0.0000000
2 0.26504369  0.93466598 0.00000000 0.0000000
3 0.53508534 -0.05736364 1.11260547 0.0000000
4 0.06748574  0.95887388 0.07774847 0.9669178


> lt
, , 1

          1          2         3         4
1 0.7071068  0.0000000 0.0000000 0.0000000
2 0.2500000  0.9682458 0.0000000 0.0000000
3 0.6123724 -0.1581139 1.0488088 0.0000000
4 0.0000000  1.0954451 0.1651446 0.8790491


> op$par[1:J]
       1        2        3        4 
0.968533 2.126882 2.944105 3.989790 

> mn
[1] 1 2 3 4

> C <- ltMatrices(runif(10))

> all.equal(as.array(chol2cov(standardize(chol = C))), 
+     as.array(chol2cor(standardize(chol = C))))
[1] TRUE

> L <- solve(C)

> all.equal(as.array(invchol2cov(standardize(invchol = L))), 
+     as.array(invchol2cor(standardize(invchol = L))))
[1] TRUE

> data("iris")

> J <- 4

> Z <- t(qnorm(do.call("cbind", lapply(iris[1:J], rank))/(nrow(iris) + 
+     1)))

> (CR <- cor(t(Z)))
             Sepal.Length Sepal.Width Petal.Length Petal.Width
Sepal.Length   1.00000000 -0.09887012    0.8695177   0.7819059
Sepal.Width   -0.09887012  1.00000000   -0.2709859  -0.2414218
Petal.Length   0.86951767 -0.27098589    1.0000000   0.8713759
Petal.Width    0.78190591 -0.24142185    0.8713759   1.0000000

> ll <- function(parm) {
+     C <- ltMatrices(parm)
+     Cs <- standardize(C)
+     -ldmvnorm(obs = Z, chol = Cs)
+ }

> sc <- function(parm) {
+     C <- ltMatrices(parm)
+     Cs <- standardize(C)
+     -rowSums(Lower_tri(destandardize(chol = C, score_schol = sldmvno .... [TRUNCATED] 

> start <- t(chol(CR))

> start <- start[lower.tri(start)]

> if (require("numDeriv", quietly = TRUE)) chk(grad(ll, 
+     start), sc(start), check.attributes = FALSE)

> op <- optim(start, fn = ll, gr = sc, method = "BFGS", 
+     hessian = TRUE)

> op$value
[1] 602.5055

> S_ML <- chol2cov(standardize(ltMatrices(op$par)))

> lwr <- do.call("cbind", lapply(iris[1:J], rank, ties.method = "min")) - 
+     1

> upr <- do.call("cbind", lapply(iris[1:J], rank, ties.method = "max"))

> lwr <- t(qnorm(lwr/nrow(iris)))

> upr <- t(qnorm(upr/nrow(iris)))

> M <- 500

> if (require("qrng", quietly = TRUE)) {
+     W <- t(ghalton(M, d = J - 1))
+ } else {
+     W <- matrix(runif(M * (J - 1)), nrow = J - 1)
+ }

> ll <- function(parm) {
+     C <- ltMatrices(parm)
+     Cs <- standardize(C)
+     -lpmvnorm(lower = lwr, upper = upr, chol = Cs, M = M, w = W)
+ }

> sc <- function(parm) {
+     C <- ltMatrices(parm)
+     Cs <- standardize(C)
+     -rowSums(Lower_tri(destandardize(chol = C, score_schol = slpmvno .... [TRUNCATED] 

> if (require("numDeriv", quietly = TRUE)) chk(grad(ll, 
+     start), sc(start), check.attributes = FALSE)

> op2 <- optim(start, fn = ll, gr = sc, method = "BFGS", 
+     hessian = TRUE)

> S_NPML <- chol2cov(standardize(ltMatrices(op2$par)))

> S_ML
, , 1

           1          2          3          4
1  1.0000000 -0.1139030  0.8768269  0.7962466
2 -0.1139030  1.0000000 -0.2856045 -0.2574850
3  0.8768269 -0.2856045  1.0000000  0.8816944
4  0.7962466 -0.2574850  0.8816944  1.0000000


> S_NPML
, , 1

            1           2          3          4
1  1.00000000 -0.09785513  0.8734599  0.7832830
2 -0.09785513  1.00000000 -0.2725997 -0.2482241
3  0.87345993 -0.27259973  1.0000000  0.8849489
4  0.78328300 -0.24822413  0.8849489  1.0000000


> sd_ML <- ltMatrices(sqrt(diag(solve(op$hessian))))

> diagonals(sd_ML) <- 0

> sd_NPML <- try(ltMatrices(sqrt(diag(solve(op2$hessian)))))

> if (!inherits(sd_NPML, "try-error")) {
+     diagonals(sd_NPML) <- 0
+     print(sd_ML)
+     print(sd_NPML)
+ }
, , 1

           1          2         3 4
1 0.00000000 0.00000000 0.0000000 0
2 0.08122393 0.00000000 0.0000000 0
3 0.13679345 0.08761945 0.0000000 0
4 0.12621115 0.10787495 0.1010173 0

, , 1

           1          2         3 4
1 0.00000000 0.00000000 0.0000000 0
2 0.07731078 0.00000000 0.0000000 0
3 0.13999691 0.08694828 0.0000000 0
4 0.13691328 0.11037843 0.1161017 0


 *** Run successfully completed ***
> proc.time()
   user  system elapsed 
 10.114   0.088  10.201 
